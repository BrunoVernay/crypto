#Eclipse modern messages class
#Fri Dec 27 13:21:10 CET 2013
AttacksBEAST=You have chosen an insecure cipher suite! \nTLS1.0 in combination with CBC allows the so called BEAST attack.
AttacksCaution=Caution!
AttacksDES=You have chosen an insecure cipher suite! \nThe current record for breaking DES (by brute-force) is less than a day.
AttacksLucky13=You have chosen an insecure cipher suite! \nTLS 1.0 or TLS1.1 in combination with CBC allows the so called Lucky13 attack. Lucky13 is a variant of the Padding Oracle Attack.
AttacksMD5=You have chosen an insecure cipher suite! \n Hashes created with MD5 can be broken in a very short period of time!
AttacksNoCipher=You have chosen an insecure cipher suite! \nYou have chosen no encryption at all. Your messages will be sent as plaintext!
AttacksProceed=\nContinue anyways?
AttacksRC4=You have chosen an insecure cipher suite! \nThere are a number of attacks on RC4. The newest and most critical is the attack from AlFardan, Bernstein, Paterson, Poettering und Schuldt.
AttacksRSA=You have chosen an insecure cipher suite! \nYou have chosen RSA to create the encryption keys. RSA provides no Perfect Forward Secrecy, to achieve this, you need to use a Diffie-Hellman algorithm.
AttacksSHA1=You have chosen an insecure cipher suite! \nSHA1 is not a secure hash algorithm. There are already a number of attacks known.

CertificateShowExit=Close
CertificateShow_btnISee_text=I see
CertificateShow_grpCertificate_text=Certificate

ClientCertificateCompositeBtnInfo=Information
ClientCertificateCompositeBtnNextStep=Next Step
ClientCertificateCompositeBtnShow=Show
ClientCertificateCompositeGrpClientCertificate=Client Certificate
ClientCertificateCompositeLblCertifcate=Client Certificate Request
ClientCertificateCompositeLblCertificateVerify=Certificate Verify
ClientCertificateCompositeLblClientKeyExchange=Client Key Exchange
ClientCertificateCompositeInitationText=Step 4: Choosen cipher suit from Client Certificate\n\nAfter the server the client sends his HelloDone message.\n
ClientCertificateCompositeCertificateRequested= \n\nThe Server sent a Certificate Request message, the client has to response with a valid certificate.\n
ClientCertificateCompositeKeyExchangeText=\nThe client always sends a KeyExchange message to agree upon a premaster-secret with the server.\n
ClientCertificateCompositeKeyExchangeRSAText=In the chase of RSA the client calculates a premaster-secret and sends it to the server. The following public RSA key was calculated:\n
ClientCertificateCompositeKeyExchangeDHText=In the chase of Diffie Hellman all the needed parameters are sent so both can calculate the same premaster-secret. The following Diffie Hellman public key parameters are calculated:\n
ClientCertificateCompositeVerifyText=\nThe client sends a CertificateVerify message to verify that the server accepted his certificate.\n
ClientCertificateCompositeDHSecret=\n\nNow the client knows his private key and the public key from the server he can calculate the premaster-secret:\n
ClientCertificateCompositeRSASecret=\n\nThe client generates a random premaster-secret an encrypts it with the servers public key:\n
ClientCertificateCompositeRSAEncrypt=\n\nThe encrypted premaster-secret will be send:\n
ClientCertificateInformationText=Client certificate:\n\nIn this step, if necessary, the client certificate is generated and key information will be exchanged.\n\nIf the server wants to have the certificate of the client, it is possible to see the client certificate by a click on \u201CShow\u201D.\n\nThe parameter client key exchange indicates, that key informations are exchanged (also only used if Diffie-Hellman is used).\n\nCertificate verify tries to verify the certificate of the server, if this is not possible the connection will be interrupted.

ClientChangeCipherSpecCompositeBtnInformation=Information
ClientChangeCipherSpecCompositeBtnNextStep=Next Step
ClientChangeCipherSpecCompositeLblClientChangeCipher=Client Change Cipher Spec
ClientChangeCipherSpecCompositeLblClientChangeCipherSpec=Change Cipher Spec
ClientChangeCipherSpecCompositeLblFinished=Finished
ClientChangeCipherSpecInformationText=Client change cipher spec:\n\nWith this static value the client tells the server that it will now use the parameters represented by the cipher suite that was selected previously. 
ClientChangeCipherSpecNoIV=There is no need for an IV with your chosen CipherSuite.

ClientFinishedCompositeBtnInformation=Information
ClientFinishedCompositeGrpServerFinished=Client Finished
ClientFinishedCompositeLblFinished=Finished
ClientFinishedInformationText=Client finished:\n\nThis message is the first encrypted message. It is a hash value from all the previous messages and keys. It is encrypted with the selected parameters.

ClientHelloCompositeBtnGenerate=generate
ClientHelloCompositeBtnInformation=Information
ClientHelloCompositeBtnNextStep=Next Step
ClientHelloCompositeGrpClientHello=Client Hello
ClientHelloCompositeLblCipherSuit=Cipher Suite
ClientHelloCompositeLblRandom=Random
ClientHelloCompositeLblSessionId=Session ID
ClientHelloCompositeLblSessionIdValue=0
ClientHelloCompositeLblVersion=Version
ClientHelloComposite_btnCheckButton_text=Check Button
ClientHelloComposite_group_text=Client Hello
ClientHelloInformationText=Client hello:\n\nIn this step the client says hello and establishes the first parameters.\n\nTo do this, the client selects the SSL/TLS-versions and cipher suites it wants to use for the communication. It is possible to select more than one SSL/TLS-version or cipher suite. With this selected parameters the handshake with the server is made. If the server supports none of the SSL/TLS-versions or cipher suites presented by the client, it denies the query and the client has to send the first handshake message again, maybe with different parameters.\n\nThe random value contains a 4 byte time stamp and a 28 byte random number. This is to prevent replay of messages.\n\nThe session ID is always \u201C0\u201D, this indicates that a new connection will be built. If the session ID would be another value, the client indicates, that it wants to use a already existing SSL/TLS connection. The steps server hello and server certificate would then be skipped. It wasn\u2019t our goal to implement this.

ServerCertificateCompositeBtnInfo=Information
ServerCertificateCompositeBtnNextStep=Next Step
ServerCertificateCompositeBtnShow=Show
ServerCertificateCompositeLblCertificate=Servers Certificate
ServerCertificateCompositeLblCertificateRequest=Server Certificate Request
ServerCertificateCompositeLblServerHelloDone=Server Hello Done
ServerCertificateCompositeLblServerKeyExchange=Server Key Exchange
ServerCertificateCompositeRdbNo=No
ServerCertificateCompositeRdbYes=Yes
ServerCertificateCompositeServerCertificate=Server Certificate
ServerCertificateCompositeInitationText=Step 3: Chosen parameters from server certificate\n\nThe server has chosen a cipher suit for the SSL/TLS connection:\n
ServerCertificateCompositeCertificateText=\n\nThe server sends his certificate to the client, which contains the servers public key and is signed with the chosen signature/hash combination.\n
ServerCertificateCompositeKeyExchangeText=\nThe server send now his Diffie Hellman public key informations to agree upon the premaster-secret.\n
ServerCertificateCompositeRequestText=\nLast but not least the client can request a certificate from the client.\n
ServerCertificateInformationText=Server Certificate:\n\nThis step is all about the key exchange, certificate exchange and calculating keys from the chosen chiper suits.\n\nThe \u201EShow\u201C Button gives the possibilty to display the server certificate.\n\nThe radio buttons at Server Certificate Request define if a certificate is requested from the client. Isn't this the chase it is also not possible to display the certificate from the client in the next step.\n\nIs a Server_key_exchange message sent, so are further information necessary for the key exchange (usually used by ephemeral Diffie Hellman = DHE).\n\nBy sending the Server_Hello_Done this step ends.

ServerCertificateInformationText=Server certificate:\n\nIn this step everything is about exchange of certificates and key generation.\n\nBy a click at the \u201CShow\u201D Button you are able to see the certificate used by the server.\n\nIt is also possible to define that the server wants to have the certificate of the client. Normally, this is not the case and then you are not able to see the client certificate at the client certificate step.\n\nThe parameter server key exchange is a value with no user interaction, it is only used if Diffie-Hellman is used for key generation.
Server hello done is also a static value, which indicates the end of the second step.
ServerChangeCipherSpecCompositeBtnInformation=Information
ServerChangeCipherSpecCompositeBtnNextStep=Next Step
ServerChangeCipherSpecCompositeLblFinished=Finished
ServerChangeCipherSpecCompositeLblServerChangeCipher=Server Change Cipher Spec
ServerChangeCipherSpecCompositeLblServerChangeCipherSpec=Change Cipher Spec
ServerChangeCipherSpecInformationText=Server change cipher spec:\n\nWith this static value the server tells the client that it will now use the parameters represented by the cipher suite that was selected previously. 
ServerChangeCipherSpecNoIV=There is no need for an IV with your chosen CipherSuite.

ServerFinishedCompositeBtnInformation=Information
ServerFinishedCompositeGrpServerFinished=Server Finished
ServerFinishedCompositeLblFinished=Finished
ServerFinishedInformationText=Server finished:\n\nThis message is the first encrypted message. It is a hash value from all the previous messages and keys. It is encrypted with the selected parameters.

ServerHelloCompositeBtnGenerate=generate
ServerHelloCompositeBtnInfo=Information
ServerHelloCompositeBtnNextStep=Next Step
ServerHelloCompositeError=Error
ServerHelloCompositeErrorRandom=Non-hex text in textfield Random
ServerHelloCompositeErrorRandomShort=Hex text in textfield Random must be 64 digits long
ServerHelloCompositeErrorSessionID=Non-numeric text in textfield Session ID
ServerHelloCompositeGrpServerHello=Server Hello
ServerHelloCompositeLblCipherSuite=Cipher Suite
ServerHelloCompositeLblRandom=Random
ServerHelloCompositeLblSessionID=Session ID
ServerHelloCompositeLblVersion=Version
ServerHelloInformationText=Server hello:\n\nIn this step the server selects a SSL/TLS-version and a cipher suite. If the client doesn\u2019t support this SSL/TLS-version or cipher suite, the server sends a message to the client that a connection isn\u2019t possible. The client has to send the list of supported SSL/TLS-version again (maybe with other SSL/TlS-versions and cipher suites).\n\nThe server also creates a random value. This random value is similar to the random value generated by the client. 4 bytes time stamp + 28 bytes random number.\n\nThe last step is to set the session ID to a value which is not \u201C0\u201D, this is done to be able to relate the connection to the client.

SslViewBtnNextStep=Next Step
SslViewBtnPreviousStep=Previous Step
SslViewBtnReset=Reset
SslViewLblClient=Client
SslViewLblInfo=Information
SslViewLblServer=Server
SslViewStxInformation=This plugin serves as graphical representation of a TLS-Handshake. Therefore the sent messages get displayed as arrows between client and server. The selectable parameters describe the content of these messages, which are needed to build up the connection.\n\nA click on the button \u201Cinformation\u201D shows an explanation of the actual step and his parameters in this information field. You can switch back to the previous information by anew click on this button.
SslViewHeadline=SSL/TLS-Visualization

Tls0=TLS 1.0
Tls1=TLS 1.1
Tls2=TLS 1.2

TLS0_DHE_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
TLS0_DHE_DSS_WITH_DES_CBC_SHA=TLS_DHE_DSS_WITH_DES_CBC_SHA
TLS0_DHE_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS0_DHE_RSA_WITH_DES_CBC_SHA=TLS_DHE_RSA_WITH_DES_CBC_SHA
TLS0_DH_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
TLS0_DH_DSS_WITH_DES_CBC_SHA=TLS_DH_DSS_WITH_DES_CBC_SHA
TLS0_DH_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
TLS0_DH_RSA_WITH_DES_CBC_SHA=TLS_DH_RSA_WITH_DES_CBC_SHA
TLS0_RSA_WITH_3DES_EDE_CBC_SHA=TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS0_RSA_WITH_DES_CBC_SHA=TLS_RSA_WITH_DES_CBC_SHA
TLS0_RSA_WITH_NULL_MD5=TLS_RSA_WITH_NULL_MD5
TLS0_RSA_WITH_NULL_SHA=TLS_RSA_WITH_NULL_SHA
TLS0_RSA_WITH_RC4_128_MD5=TLS_RSA_WITH_RC4_128_MD5
TLS0_RSA_WITH_RC4_128_SHA=TLS_RSA_WITH_RC4_128_SHA
TLS1_DHE_DSS_WITH_AES_128_CBC_SHA=TLS_DHE_DSS_WITH_AES_128_CBC_SHA
TLS1_DHE_DSS_WITH_AES_256_CBC_SHA=TLS_DHE_DSS_WITH_AES_256_CBC_SHA
TLS1_DHE_RSA_WITH_AES_128_CBC_SHA=TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS1_DHE_RSA_WITH_AES_256_CBC_SHA=TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS1_DH_DSS_WITH_AES_128_CBC_SHA=TLS_DH_DSS_WITH_AES_128_CBC_SHA
TLS1_DH_DSS_WITH_AES_256_CBC_SHA=TLS_DH_DSS_WITH_AES_256_CBC_SHA
TLS1_DH_RSA_WITH_AES_128_CBC_SHA=TLS_DH_RSA_WITH_AES_128_CBC_SHA
TLS1_DH_RSA_WITH_AES_256_CBC_SHA=TLS_DH_RSA_WITH_AES_256_CBC_SHA
TLS1_RSA_WITH_AES_128_CBC_SHA=TLS_RSA_WITH_AES_128_CBC_SHA 
TLS1_RSA_WITH_AES_256_CBC_SHA=TLS_RSA_WITH_AES_256_CBC_SHA 
TLS2_DHE_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
TLS2_DHE_DSS_WITH_AES_128_CBC_SHA=TLS_DHE_DSS_WITH_AES_128_CBC_SHA
TLS2_DHE_DSS_WITH_AES_128_CBC_SHA256=TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
TLS2_DHE_DSS_WITH_AES_128_GCM_SHA256=TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
TLS2_DHE_DSS_WITH_AES_256_CBC_SHA=TLS_DHE_DSS_WITH_AES_256_CBC_SHA
TLS2_DHE_DSS_WITH_AES_256_CBC_SHA256=TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
TLS2_DHE_DSS_WITH_AES_256_GCM_SHA384=TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
TLS2_DHE_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_DHE_RSA_WITH_AES_128_CBC_SHA=TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS2_DHE_RSA_WITH_AES_128_CBC_SHA256=TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS2_DHE_RSA_WITH_AES_128_GCM_SHA256=TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS2_DHE_RSA_WITH_AES_256_CBC_SHA=TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS2_DHE_RSA_WITH_AES_256_CBC_SHA256=TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS2_DHE_RSA_WITH_AES_256_GCM_SHA384=TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS2_DH_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
TLS2_DH_DSS_WITH_AES_128_CBC_SHA=TLS_DH_DSS_WITH_AES_128_CBC_SHA
TLS2_DH_DSS_WITH_AES_128_CBC_SHA256=TLS_DH_DSS_WITH_AES_128_CBC_SHA256
TLS2_DH_DSS_WITH_AES_128_GCM_SHA256=TLS_DH_DSS_WITH_AES_128_GCM_SHA256
TLS2_DH_DSS_WITH_AES_256_CBC_SHA=TLS_DH_DSS_WITH_AES_256_CBC_SHA
TLS2_DH_DSS_WITH_AES_256_CBC_SHA256=TLS_DH_DSS_WITH_AES_256_CBC_SHA256
TLS2_DH_DSS_WITH_AES_256_GCM_SHA384=TLS_DH_DSS_WITH_AES_256_GCM_SHA384
TLS2_DH_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_DH_RSA_WITH_AES_128_CBC_SHA=TLS_DH_RSA_WITH_AES_128_CBC_SHA
TLS2_DH_RSA_WITH_AES_128_CBC_SHA256=TLS_DH_RSA_WITH_AES_128_CBC_SHA256 
TLS2_DH_RSA_WITH_AES_128_GCM_SHA256=TLS_DH_RSA_WITH_AES_128_GCM_SHA256
TLS2_DH_RSA_WITH_AES_256_CBC_SHA=TLS_DH_RSA_WITH_AES_256_CBC_SHA
TLS2_DH_RSA_WITH_AES_256_CBC_SHA256=TLS_DH_RSA_WITH_AES_256_CBC_SHA256
TLS2_DH_RSA_WITH_AES_256_GCM_SHA384=TLS_DH_RSA_WITH_AES_256_GCM_SHA384
TLS2_RSA_WITH_3DES_EDE_CBC_SHA=TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_RSA_WITH_AES_128_CBC_SHA=TLS_RSA_WITH_AES_128_CBC_SHA
TLS2_RSA_WITH_AES_128_CBC_SHA256=TLS_RSA_WITH_AES_128_CBC_SHA256
TLS2_RSA_WITH_AES_128_GCM_SHA256=TLS_RSA_WITH_AES_128_GCM_SHA256
TLS2_RSA_WITH_AES_256_CBC_SHA=TLS_RSA_WITH_AES_256_CBC_SHA 
TLS2_RSA_WITH_AES_256_CBC_SHA256=TLS_RSA_WITH_AES_256_CBC_SHA256
TLS2_RSA_WITH_AES_256_GCM_SHA384=TLS_RSA_WITH_AES_256_GCM_SHA384
TLS2_RSA_WITH_NULL_MD5=TLS_RSA_WITH_NULL_MD5
TLS2_RSA_WITH_NULL_SHA=TLS_RSA_WITH_NULL_SHA
TLS2_RSA_WITH_NULL_SHA256=TLS_RSA_WITH_NULL_SHA256 
TLS2_RSA_WITH_RC4_128_MD5=TLS_RSA_WITH_RC4_128_MD5
TLS2_RSA_WITH_RC4_128_SHA=TLS_RSA_WITH_RC4_128_SHA

Tls1.0=TLS 1.0
Tls1.1=TLS 1.1
Tls1.2=TLS 1.2

stxInformationCipherSuiteRefused1=Server sends a message to the client, that the server wants to use a cipher suite (
stxInformationCipherSuiteRefused2=), that is not supported by the client, according to the first message the client sent. To ensure that a connection is possible, the client has to support the cipher suite, the server wants to use.
stxInformationCipherSuitesExchanged=Selected Cipher Suites, VersionID, Session ID and Random Value were sent to the server.\n\n
stxInformationRandomValue=Random Value\:\n
stxInformationSelectedCiphers=Selected Cipher Suites\n\nTLS1.0\:\n
stxInformationTLS1=\nTLS 1.1\:\n
stxInformationTLS2=\nTLS 1.2\:\n
certShowWindowName=Certificate