SslViewLblClient=Client
SslViewLblServer=Server
SslViewLblInfo=Information
SslViewBtnPreviousStep=Vorhergehender Schritt
SslViewBtnNextStep=Nächster Schritt
SslViewBtnReset=Neustart
SslViewStxInformation=Generelle Erklärung:\n\nDieses Plugin dient zur graphischen Darstellung eines TLS-Handshakes. Dabei werden die gesendeten Nachrichten durch Pfeile zwischen Client und Server dargestellt. Die auswählbaren Parameter beschreiben den Inhalt der Nachrichten, die zum Aufbau einer Verbindung benötigt werden.\n\nDurch einen Klick auf den Button "Information" wird in diesem Fenster eine Erklärung zum aktuellen Schritt und dessen Parameter angezeigt. Durch einen erneuten Klick auf den Button kann man wieder auf die vorherige Anzeige zurückschalten.\n
SslViewHeadline=SSL/TLS-Visualisierung

btnInformationToggleParams=Parameter
stxInformationCipherSuitesExchanged=Die ausgewählten Cipher Suites wurden zusammen mit Versions ID, Session ID und dem Zufallswert an den Server übertragen.\n\n
stxInformationSelectedCiphers=Schritt 1: Gewählte Parameter von Client Hello\n\nTLS1.0:\n
stxInformationServerHello=Schritt 2: Gewählte Parameter von Server Hello\n\n
stxInformationRandomValue=Zufallswert:\n
stxInformationTLS1=\nTLS 1.1:\n
stxInformationTLS2=\nTLS 1.2:\n
stxInformationCipherSuiteRefused1=Der Server schickt dem Client eine Nachricht, dass die Cipher Suite, die er verwenden will (
stxInformationCipherSuiteRefused2=) laut der ersten Nachricht des Clients, von diesem nicht angeboten wird. Damit ein Verbindungsaufbau möglich ist, muss der Client die Cipher Suite anbieten, die der Server verwenden will.

ClientHelloCompositeBtnGenerate=Generieren
ClientHelloCompositeBtnInformation=Informationen
ClientHelloCompositeGrpClientHello=1. Client Hello
ClientHelloCompositeLblCipherSuit=Cipher Suite
ClientHelloCompositeLblRandom=Random
ClientHelloCompositeLblSessionId=Session ID
ClientHelloCompositeLblSessionIdValue=0
ClientHelloCompositeLblVersion=Version
ClientHelloCompositeBtnNextStep=Nächster Schritt
ClientHelloInformationText=Schritt 1: Generelle Erklärung zum Client Hello\n\nIn diesem Schritt geht es darum, dass der Client auf sich aufmerksam macht und die ersten Verbindungsparameter übermittelt.\n\nDabei wählt der Client die von ihm unterstützten SSL/TLS- Versionen sowie Cipher Suits aus, welche er für diese Kommunikation verwenden möchte. Hierbei sind auch Mehrfachauswahlen möglich. Des Weiteren wird mit diesen Parametern der Handshake durchgeführt. Falls der Server keine der vorgeschlagenen Optionen unterstützt, weist er das Query zurück und der Client muss erneut Vorschläge senden.\n\nDer Zufallswert besteht aus 4 Byte Zeitstempel + 28 Byte Zufallszahl. Dies dient dem Replayschutz.\n\nDie Session ID ist bei jedem Verbindungsaufbau \u201E0\u201C und signalisiert damit, dass eine neue Verbindung aufgebaut werden soll. Wäre der Wert ungleich \u201E0\u201C, so würden die Parameter einer bestehenden Verbindung verwendet und die Schritte 2 und 3 übersprungen werden, dies darzustellen war jedoch nicht unser Ziel.

ServerHelloCompositeBtnGenerate=Generieren
ServerHelloCompositeBtnInfo=Informationen
ServerHelloCompositeGrpServerHello=2. Server Hello
ServerHelloCompositeLblCipherSuite=Cipher Suite
ServerHelloCompositeLblRandom=Random
ServerHelloCompositeLblSessionID=Session ID
ServerHelloCompositeLblVersion=Version
ServerHelloCompositeBtnNextStep=Nächster Schritt
ServerHelloCompositeError=Fehler
ServerHelloCompositeErrorSessionID=Es dürfen sich nur hexadezimale Zahlen im Feld Session ID befinden!
ServerHelloCompositeErrorSessionIDLength=Die Eingabe im Feld Session ID darf höchstens 64 Zeichen lang sein!
ServerHelloCompositeErrorRandom=Es dürfen sich nur hexadezimale Zahlen im Feld Random befinden!
ServerHelloCompositeErrorRandomShort=Die Eingabe im Feld Random muss 64 Zeichen lang sein!
ServerHelloInformationText=Schritt 2: Generelle Erklärung zum Server Hello\n\nIn diesem Schritt wählt der Server eine SSL/TLS- Version sowie eine Cipher Suite aus. Sollte diese SSL/TLS-Version bzw. Cipher Suite vom Client nicht unterstützt werden, sendet der Server eine Nachricht an den Client, dass mit diesen Einstellungen kein Verbindungsaufbau möglich ist und der Client erneut eine Liste mit unterstützten SSL/TLS-Versionen und Cipher Suites senden muss.\n\nAuch der Server erzeugt sich einen eigenen Zufallswert. Dieser hat denselben Aufbau wie der des Clients, d.h. er besteht aus 4 Byte Zeitstempel + 28 Byte Zufallszahl.\n\nZuletzt wird die übermittelte Session ID noch auf einen Wert ungleich \u201E0\u201C gesetzt, um später die durchgeführten Handshakes den einzelnen Clients zuordnen zu können. Dieser Wert darf maximal 32 Byte groß sein.

ServerCertificateCompositeBtnInfo=Informationen
ServerCertificateCompositeBtnShow=Anzeigen
ServerCertificateCompositeLblCertificate=Server Certificate
ServerCertificateCompositeLblCertificateRequest=Server Certificate Request
ServerCertificateCompositeLblServerHelloDone=Server Hello Done
ServerCertificateCompositeLblServerKeyExchange=Server Key Exchange
ServerCertificateCompositeRdbNo=Nein
ServerCertificateCompositeRdbYes=Ja
ServerCertificateCompositeServerCertificate=3. Server Certificate
ServerCertificateCompositeBtnNextStep=Nächster Schritt
ServerCertificateCompositeInitationText=Schritt 3: Gewählte Parameter von Server Certificate\n\nDer Server hat nun eine Cipher Suit für die SSL/TLS Übertragung ausgewählt:\n
ServerCertificateCompositeCertificateText=\n\nDer Server versendet ein Zertifikat an den Client, welches den gewählten öffentlichen Schlüssel enthält und mit gewählten Signature/Hash kombination signiert wird.\n
ServerCertificateCompositeKeyExchangeText=\nDer Server sendet nun seine öffentlichen Informationen des Diffie Hellman Schlüssel um dem Client den Schlüsselaustausch zu ermöglichen.\n
ServerCertificateCompositeRequestText=\nAbschließend kann der Server noch ein Zertifikat von seinem Client anfordern\n
ServerCertificateInformationText=Schritt 3: Generelle Erklärung zum Server Certificate\n\nIn diesem Schritt dreht sich alles um den Austausch von Zertifikaten, sowie die Schlüsselberechnung durch die zuvor festgelegten Parameter.\n\nDurch den \u201EAnzeigen\u201C Button kann man sich das Zertifikat des Servers anzeigen lassen.\n\nDurch die Auswahlmöglichkeiten bei Server Certificate Request legt man fest, ob ein Zertifikat des Client angefordert wird. Ist dies nicht der Fall, ist es auch nicht möglich sich im nächsten Schritt das Zertifikat des Client anzeigen zu lassen.\n\nDer Parameter Server_Key_Exchange teilt dem Client mit, dass zusätzliche Schlüsselinformationen benötigt werden (bei Diffie-Hellman nötig).\n\nMit Server_Hello_Done wird der 2. Schritt beendet.

ClientCertificateCompositeBtnInfo=Informationen
ClientCertificateCompositeBtnShow=Anzeigen
ClientCertificateCompositeGrpClientCertificate=4. Client Certificate 
ClientCertificateCompositeLblCertifcate=Client Certificate Request
ClientCertificateCompositeLblCertificateVerify=Certificate Verify
ClientCertificateCompositeLblClientKeyExchange=Client Key Exchange
ClientCertificateCompositeBtnNextStep=Nächster Schritt
ClientCertificateCompositeInitationText=Schritt 4: Gewählte Parameter von Client Certificate\n\nNachdem der Server seine HelloDone Nachricht versendet hat folgt nun der Client.\n
ClientCertificateCompositeCertificateRequested=\n\nDa der Server ein Certificate Request gesendet hat muss der Client mit einem gültigen Zertifikat antworten.\n
ClientCertificateCompositeKeyExchangeText=\nDer Client sendet immer eine KeyExchange Nachricht um sich auf das premaster secret zu einigen.\n
ClientCertificateCompositeKeyExchangeRSAText=Im Falle von RSA wird direkt RSA Geheimnis übertragen.\nFolgender öffentliche RSA Schlüssel wurde berechnet:\n
ClientCertificateCompositeKeyExchangeDHText=Im Falle von Diffie Hellman werden die nötigen Parameter gesendet um sich auf ein gemeinsames Geheimnis zu einigen. Folgende öffenliche Diffie Hellman Parameter wurden berechnet:\n
ClientCertificateCompositeVerifyText=\nEs wird eine CertificateVerify-Nachricht versendet um zu erfragen ob das gesendete Zertifikat vom Server akzeptiert wurde.\n
ClientCertificateCompositeDHSecret=\n\nNachdem der Client nun über den öffentlichen Schlüssel des Servers verfügt und über seinen privaten Schlüssel kann er sich das premaster Secret berechnen:\n
ClientCertificateCompositeRSASecret=\n\nDer Client bestimmt zufällig ein premaster Secret und verschlüsselt dieses mit dem öffentlichen Schlüssel des Servers um dieses zu versenden:\n
ClientCertificateCompositeRSAEncrypt=\n\nDas verschlüsselte premaster Secret wird nun übertragen:\n
ClientCertificateInformationText=Schritt 4: Generelle Erklärung zum Client Certificate\n\nIn diesem Schritt wird, sofern angefordert, das Zertifikat des Client erzeugt sowie Schlüsselinformationen ausgetauscht.\n\nSofern im Schritt zuvor (Server Certificate) das Feld Server Certificate Request mit \u201EJa\u201C markiert wurde, kann man sich über den \u201EAnzeigen\u201C-Button das Zertifikat des Client anzeigen lassen.\n\nDer Parameter Client_Key_Exchange verdeutlicht, dass Schlüsselmaterial ausgetauscht wird.\n\nIm Certificate_Verify versucht der Client das Zertifikat des Servers zu verifizieren. Wenn dies nicht möglich ist, wird die Verbindung abgebrochen.

ServerChangeCipherSpecCompositeBtnInformation=Informationen
ServerChangeCipherSpecCompositeLblFinished=Finished
ServerChangeCipherSpecCompositeLblServerChangeCipher=5. Server Change Cipher Spec
ServerChangeCipherSpecCompositeLblServerChangeCipherSpec=Change Cipher Spec
ServerChangeCipherSpecCompositeBtnNextStep=Nächster Schritt
ServerChangeCipherSpecInformationText=Schritt 5: Generelle Erklärung zum Server Change Cipher Spec\n\nVia Change_Cipher_Spec signalisiert der Server, dass er ab jetzt die neuen, zuvor festgelegten Schlüssel verwendet.
ServerChangeCipherSpecInitationText=Schritt 5: Parameter von Server Change Cipher Spec\n\nDie ChangeCipherSpec-Nachricht enthält nur den Wert 1 und signalisiert damit, dass jegliche weitere Kommunikation unter der zuvor ausgewählten CipherSuite gesichert (verschlüsselt) stattfindet.\n
ServerChangeCipherSpecMasterSecret=\n\nFür die Verschlüsselung wird aus dem premaster secret nun ein master secret berechnet:\n
ServerChangeCipherSpecServerMACsecret=\n\nAus diesem master secret werden jetzt die folgenden Schlüssel und Parameter vom Server berechnet:\n\nDer server write MAC key, der zur Authentifizierung von - vom Server gesendeten - Daten verwendet wird:\n
ServerChangeCipherSpecServerKey=\n\nDer server write key, mit dem die zu sendenden Daten vom Server verschlüsselt werden:\n
ServerChangeCipherSpecServerIV=\n\nDer server write IV, ein Inizialisierungsvektor der aktuell nur für implizite Authentifizierungsverschlüsselungen generiert wird:\n
ServerChangeCipherSpecNoIV=Für die von Ihnen ausgewählte CipherSuite wird kein IV benötigt.
ServerChangeCipherSpecPreMaster=\nDer Server berechnet sich nun ebenfalls sein premaster secret:\n

ServerFinishedCompositeBtnInformation=Informationen
ServerFinishedCompositeLblFinished=Finished
ServerFinishedCompositeGrpServerFinished=6. Server Finished
ServerFinishedInformationText=Schritt 6: Gernerelle Erklärung zum Server Finished\n\nServer Finished ist eine Nachricht, bestehend aus einem Hashwert über alle vorhergehenden Nachrichten und erzeugten Schlüssel. Dies dient zum Vergleichen der berechneten Schlüssel.\n\nDiese Nachricht ist die erste Nachricht die mit den zuvor festgelegten Parametern verschlüsselt wird.
ServerFinishedInitationText=Schritt 6: Parameter von Server Finished\n\nAlle bisher gesendeten Nachrichten werden in einem Hashwert zusammengefasst, zusammen mit dem master secret und der Nachricht "server finished" an eine Pseudorandom-Funktion übergeben und das Ergebnis ist die Finished-Nachricht:\n

ClientChangeCipherSpecCompositeBtnInformation=Informationen
ClientChangeCipherSpecCompositeLblClientChangeCipher=7. Client Change Cipher Spec
ClientChangeCipherSpecCompositeLblClientChangeCipherSpec=Change Cipher Spec
ClientChangeCipherSpecCompositeLblFinished=Finished
ClientChangeCipherSpecCompositeBtnNextStep=Nächster Schritt
ClientChangeCipherSpecInformationText=Schritt 7: Generelle Erklärung zum Client Change Cipher Spec\n\nVia Change_Cipher_Spec signalisiert der Server, dass er ab jetzt die neuen, zuvor festgelegten Schlüssel verwendet.
ClientChangeCipherSpecInitationText=Schritt 7: Parameter von Client Change Cipher Spec\n\nDie ChangeCipherSpec-Nachricht enthält nur den Wert 1 und signalisiert damit, dass jegliche weitere Kommunikation unter der zuvor ausgewählten CipherSuite gesichert (verschlüsselt) stattfindet.
ClientChangeCipherSpecClientMACsecret=\n\nAus diesem master secret werden jetzt die folgenden Schlüssel und Parameter vom Client berechnet:\n\nDer client write MAC key, der zur Authentifizierung von - vom Client gesendeten - Daten verwendet wird:\n
ClientChangeCipherSpecClientKey=\n\nDer client write key, mit dem die zu sendenden Daten vom Client verschlüsselt werden:\n
ClientChangeCipherSpecClientIV=\n\nDer client write IV, ein Inizialisierungsvektor der aktuell nur für implizite Authentifizierungsverschlüsselungen generiert wird:\n
ClientChangeCipherSpecNoIV=Für die von Ihnen ausgewählte CipherSuite wird kein IV benötigt.

ClientFinishedCompositeBtnInformation=Informationen
ClientFinishedCompositeLblFinished=Finished
ClientFinishedCompositeGrpServerFinished=8. Client Finished
ClientFinishedInformationText=Schritt 8: Generelle Erklärung zum Client Finished\n\nClient Finished ist eine Nachricht, bestehend aus einem Hashwert über alle vorhergehenden Nachrichten und erzeugten Schlüssel. Dies dient zum Vergleichen der berechneten Schlüssel.\n\nDiese Nachricht ist die erste Nachricht die mit den zuvor festgelegten Parametern verschlüsselt wird.
ClientFinishedInitationText=Schritt 8: Parameter von Client Finished\n\nAlle bisher gesendeten Nachrichten werden in einem Hashwert zusammengefasst, zusammen mit dem master secret und der Nachricht "client finished" an eine Pseudorandom-Funktion übergeben und das Ergebnis ist die Finished-Nachricht:\n

AttacksCaution = Achtung!
AttacksProceed = \n Trotzdem fortsetzen?
AttacksSHA1=Sie haben eine unsichere Cipher Suite ausgewählt! \nDie Hashfunktion SHA1 ist nicht sicher - es existieren mehrere bekannte Angriffe auf diese Hashfunktion.
AttacksMD5=Sie haben eine unsichere Cipher Suite ausgewählt! \nMit MD5 erstellte Hashes können innerhalb kürzester Zeit gebrochen werden!
AttacksBEAST=Sie haben eine unsichere Cipher Suite ausgewählt! \nTLS1.0 in Kombination mit CBC ermöglicht einen Angriff mit der sogenannnten BEAST-Attacke.
AttacksRC4=Sie haben eine unsichere Cipher Suite ausgewählt! \nEs gibt eine Reihe von Angriffen auf RC4. Die im Moment aktuellste ist eine Attacke von  AlFardan, Bernstein, Paterson, Poettering und Schuldt.
AttacksDES=Sie haben eine unsichere Cipher Suite ausgewählt! \nDer aktuelle Rekord beim Brechen (Brute-Force) von DES liegt bei unter einem Tag.
AttacksNoCipher=Sie haben eine unsichere Cipher Suite ausgewählt! \nSie haben keine Verschlüsselung ausgewählt, ihre Nachrichten werden im Klartext versendet!
AttacksLucky13=Sie haben eine unsichere Cipher Suite ausgewählt! \nTLS 1.0 bzw. TLS1.1 in Kombination mit CBC ermöglicht die sogenannte Lucky13 Attacke. Lucky13 ist eine Variante der Padding Oracle Attacke.
AttacksRSA=Sie haben eine unsichere Cipher Suite ausgewählt! \nSie haben RSA zur Schlüsselgenerierung gewählt somit ist keine Perfect Forward Secrecy gegeben, um diese zu erreichen muss das Diffie-Hellman Verfahren verwendet werden.

Tls0=TLS 1.0
Tls1=TLS 1.1
Tls2=TLS 1.2

TLS0_RSA_WITH_NULL_MD5=TLS_RSA_WITH_NULL_MD5
TLS0_RSA_WITH_NULL_SHA =TLS_RSA_WITH_NULL_SHA
TLS0_RSA_WITH_RC4_128_MD5=TLS_RSA_WITH_RC4_128_MD5
TLS0_RSA_WITH_RC4_128_SHA=TLS_RSA_WITH_RC4_128_SHA
TLS0_RSA_WITH_DES_CBC_SHA =TLS_RSA_WITH_DES_CBC_SHA
TLS0_RSA_WITH_3DES_EDE_CBC_SHA =TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS0_DH_DSS_WITH_DES_CBC_SHA=TLS_DH_DSS_WITH_DES_CBC_SHA
TLS0_DH_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
TLS0_DH_RSA_WITH_DES_CBC_SHA=TLS_DH_RSA_WITH_DES_CBC_SHA
TLS0_DH_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
TLS0_DHE_DSS_WITH_DES_CBC_SHA=TLS_DHE_DSS_WITH_DES_CBC_SHA
TLS0_DHE_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
TLS0_DHE_RSA_WITH_DES_CBC_SHA=TLS_DHE_RSA_WITH_DES_CBC_SHA
TLS0_DHE_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA

TLS1_RSA_WITH_AES_128_CBC_SHA=TLS_RSA_WITH_AES_128_CBC_SHA 
TLS1_DH_DSS_WITH_AES_128_CBC_SHA=TLS_DH_DSS_WITH_AES_128_CBC_SHA
TLS1_DH_RSA_WITH_AES_128_CBC_SHA=TLS_DH_RSA_WITH_AES_128_CBC_SHA
TLS1_DHE_DSS_WITH_AES_128_CBC_SHA=TLS_DHE_DSS_WITH_AES_128_CBC_SHA
TLS1_DHE_RSA_WITH_AES_128_CBC_SHA=TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS1_RSA_WITH_AES_256_CBC_SHA =TLS_RSA_WITH_AES_256_CBC_SHA 
TLS1_DH_DSS_WITH_AES_256_CBC_SHA=TLS_DH_DSS_WITH_AES_256_CBC_SHA
TLS1_DH_RSA_WITH_AES_256_CBC_SHA=TLS_DH_RSA_WITH_AES_256_CBC_SHA
TLS1_DHE_DSS_WITH_AES_256_CBC_SHA=TLS_DHE_DSS_WITH_AES_256_CBC_SHA
TLS1_DHE_RSA_WITH_AES_256_CBC_SHA=TLS_DHE_RSA_WITH_AES_256_CBC_SHA

TLS2_RSA_WITH_NULL_MD5=TLS_RSA_WITH_NULL_MD5
TLS2_RSA_WITH_NULL_SHA=TLS_RSA_WITH_NULL_SHA
TLS2_RSA_WITH_NULL_SHA256 =TLS_RSA_WITH_NULL_SHA256 
TLS2_RSA_WITH_RC4_128_MD5=TLS_RSA_WITH_RC4_128_MD5
TLS2_RSA_WITH_RC4_128_SHA=TLS_RSA_WITH_RC4_128_SHA
TLS2_RSA_WITH_3DES_EDE_CBC_SHA=TLS_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_RSA_WITH_AES_128_CBC_SHA =TLS_RSA_WITH_AES_128_CBC_SHA
TLS2_RSA_WITH_AES_256_CBC_SHA=TLS_RSA_WITH_AES_256_CBC_SHA 
TLS2_RSA_WITH_AES_128_CBC_SHA256=TLS_RSA_WITH_AES_128_CBC_SHA256
TLS2_RSA_WITH_AES_256_CBC_SHA256=TLS_RSA_WITH_AES_256_CBC_SHA256

TLS2_DH_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
TLS2_DH_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_DHE_DSS_WITH_3DES_EDE_CBC_SHA=TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
TLS2_DHE_RSA_WITH_3DES_EDE_CBC_SHA=TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS2_DH_DSS_WITH_AES_128_CBC_SHA=TLS_DH_DSS_WITH_AES_128_CBC_SHA
TLS2_DH_RSA_WITH_AES_128_CBC_SHA=TLS_DH_RSA_WITH_AES_128_CBC_SHA
TLS2_DHE_DSS_WITH_AES_128_CBC_SHA=TLS_DHE_DSS_WITH_AES_128_CBC_SHA
TLS2_DHE_RSA_WITH_AES_128_CBC_SHA=TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS2_DH_DSS_WITH_AES_256_CBC_SHA=TLS_DH_DSS_WITH_AES_256_CBC_SHA
TLS2_DH_RSA_WITH_AES_256_CBC_SHA=TLS_DH_RSA_WITH_AES_256_CBC_SHA
TLS2_DHE_DSS_WITH_AES_256_CBC_SHA=TLS_DHE_DSS_WITH_AES_256_CBC_SHA
TLS2_DHE_RSA_WITH_AES_256_CBC_SHA=TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS2_DH_DSS_WITH_AES_128_CBC_SHA256=TLS_DH_DSS_WITH_AES_128_CBC_SHA256
TLS2_DH_RSA_WITH_AES_128_CBC_SHA256 =TLS_DH_RSA_WITH_AES_128_CBC_SHA256 
TLS2_DHE_DSS_WITH_AES_128_CBC_SHA256=TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
TLS2_DHE_RSA_WITH_AES_128_CBC_SHA256=TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS2_DH_DSS_WITH_AES_256_CBC_SHA256=TLS_DH_DSS_WITH_AES_256_CBC_SHA256
TLS2_DH_RSA_WITH_AES_256_CBC_SHA256=TLS_DH_RSA_WITH_AES_256_CBC_SHA256
TLS2_DHE_DSS_WITH_AES_256_CBC_SHA256=TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
TLS2_DHE_RSA_WITH_AES_256_CBC_SHA256=TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS2_RSA_WITH_AES_128_GCM_SHA256=TLS_RSA_WITH_AES_128_GCM_SHA256
TLS2_RSA_WITH_AES_256_GCM_SHA384=TLS_RSA_WITH_AES_256_GCM_SHA384
TLS2_DHE_RSA_WITH_AES_128_GCM_SHA256=TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS2_DHE_RSA_WITH_AES_256_GCM_SHA384=TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS2_DH_RSA_WITH_AES_128_GCM_SHA256=TLS_DH_RSA_WITH_AES_128_GCM_SHA256
TLS2_DH_RSA_WITH_AES_256_GCM_SHA384=TLS_DH_RSA_WITH_AES_256_GCM_SHA384
TLS2_DHE_DSS_WITH_AES_128_GCM_SHA256=TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
TLS2_DHE_DSS_WITH_AES_256_GCM_SHA384=TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
TLS2_DH_DSS_WITH_AES_128_GCM_SHA256=TLS_DH_DSS_WITH_AES_128_GCM_SHA256
TLS2_DH_DSS_WITH_AES_256_GCM_SHA384=TLS_DH_DSS_WITH_AES_256_GCM_SHA384

certShowWindowName=Zertifikat